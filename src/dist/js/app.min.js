function NoInvestmentsException(e){this.name="NoInvestmentsException",this.message=e,this.stack=(new Error).stack}function NoTradersException(e){this.name="NoTradersException",this.message=e,this.stack=(new Error).stack}function NoUserException(e){this.name="NoUserException",this.message=e,this.stack=(new Error).stack}function Investment(e,t){this.trader=e,this.amount=t}function Position(e,t,r,n,s,o){this.traderId=e,this.datetime=t,this.stock=r,this.price=n,this["short"]=s,this.percentage=o}function Trader(e,t){this.name=e,this.positions=t}function User(e,t,r){this.name=e,this.available=t,this.investments=r}var config={url:"",localUrl:"http://localhost:63342/platform/src/data/demo.json"};NoInvestmentsException.prototype=Object.create(Error.prototype),NoInvestmentsException.prototype.constructor=NoInvestmentsException,NoTradersException.prototype=Object.create(Error.prototype),NoTradersException.prototype.constructor=NoTradersException,NoUserException.prototype=Object.create(Error.prototype),NoUserException.prototype.constructor=NoUserException;var formatMoney=function(e){return e.toLocaleString(void 0,{minimumFractionDigits:2})},PositionService=function(){"use strict";return{get:function(){var e=new XMLHttpRequest;if(e.open("GET",config.localUrl,!1),e.send(null),200===e.status){for(var t=JSON.parse(e.responseText),r=[],n=0,s=t.positions.length;s>n;n++){var o=t.positions[n],i=new Position(o.traderId,o.datetime,o.stock,o.price,o["short"],o.percentage);r.push(i)}return r}},getByTraderId:function(e){var t=new XMLHttpRequest;if(t.open("GET",config.localUrl,!1),t.send(null),200===t.status){for(var r=JSON.parse(t.responseText),n=[],s=0,o=r.positions.length;o>s;s++){var i=r.positions[s];if(i.traderId===e){var a=new Position(i.traderId,i.datetime,i.stock,i.price,i["short"],i.percentage);n.push(a)}}return n}}}}(),TraderService=function(){"use strict";return{get:function(){var e=new XMLHttpRequest;if(e.open("GET",config.localUrl,!1),e.send(null),200===e.status){for(var t=JSON.parse(e.responseText),r=[],n=0,s=t.traders.length;s>n;n++){var o=t.traders[n],i=PositionService.getByTraderId(o.id),a=new Trader(o.name,i);r.push(a)}return r}},getById:function(e){var t=new XMLHttpRequest;if(t.open("GET",config.localUrl,!1),t.send(null),200===t.status)for(var r=JSON.parse(t.responseText),n=0,s=r.traders.length;s>n;n++){var o=r.traders[n];if(o.id===e){var i=PositionService.getByTraderId(o.id);return new Trader(o.name,i)}}}}}(),UserService=function(){"use strict";return{get:function(){var e=new XMLHttpRequest;if(e.open("GET",config.localUrl,!1),e.send(null),200===e.status){for(var t=JSON.parse(e.responseText),r=[],n=0,s=t.user.investments.length;s>n;n++){var o=t.user.investments[n],i=TraderService.getById(o.traderId),a=new Investment(i,o.amount);r.push(a)}return new User(t.user.name,t.user.available,r)}}}}(),UserViewModel={user:null,render:function(e){if(!this.user||"object"!=typeof this.user)throw new NoUserException("No user set");var t=document.querySelector(e),r="<section class='img'></section>";r+="<h2>"+this.user.name+"</h2>",r+="<h3>&euro; "+formatMoney(this.user.available)+"</h3>";for(var n=0,s=0,o="",i=0,a=this.user.investments.length;a>i;i++){var c=this.user.investments[i];n+=c.amount,o+="<trader-profile><section class='img'></section>",o+="<h2>"+c.trader.name+"</h2>",o+="<h3>&euro; "+formatMoney(c.amount)+"</h3>",o+="<dl>";for(var d=0,p=0,u=c.trader.positions.length;u>p;p++){var l=c.trader.positions[p];d+=l.percentage}s+=c.amount/100*d,o+="<dt>Uninvested:</dt><dd><span>&euro;</span>"+formatMoney(c.amount/100*(100-d))+"</dd>",o+="<dt>Invested:</dt><dd><span>&euro;</span>"+formatMoney(c.amount/100*d)+"</dd>",o+="</trader-profile>"}r+="<dl>",r+="<dt>Available:</dt><dd><span>&euro;</span>"+formatMoney(this.user.available-n)+"</dd>",r+="<dt>Uninvested:</dt><dd><span>&euro;</span>"+formatMoney(this.user.available-(this.user.available-n)-s)+"</dd>",r+="<dt>Invested:</dt><dd><span>&euro;</span>"+formatMoney(s)+"</dd>",r+="</dl>",t.innerHTML=r+o}};!function(){UserViewModel.user=UserService.get(),UserViewModel.render("user-profile")}();
//# sourceMappingURL=data:application/json;base64,
